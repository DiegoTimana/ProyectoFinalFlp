#lang eopl
;################### PROYECTO FINAL FLP ############################
;Alexis Diego Timaná Romero (1870385)  alexis.timana@correounivalle.edu.co
;Luis Eduardo Ruiz Castaño (1831986)   luis.eduardo.ruiz@correounivalle.edu.co 
;Gabriel De Jesús Arango (1823077)     gabriel.arango@correounivalle.edu.co
;#############################################################
;SINTAXIS BASADA EN PYTHON, JAVA Y C++

; ESPECIFICACIÓN LÉXICA
(define lexica
'((white-sp
   (whitespace) skip)
  (comentario
   ("#" (arbno (not #\newline))) skip) ;comentarios basados en python
  (cadena
   ("\"" (arbno (not #\newline))"\"" ) symbol )
  (identificador
   (letter (arbno (or letter digit "?"))) symbol)
  (numero
   (digit (arbno digit)) number) ;entero
  (numero
   ("-" digit (arbno digit)) number) ;entero negativo
  (numero
   (digit (arbno digit) "." digit (arbno digit)) number) ;flotante
  (numero
   ("-" digit (arbno digit) "." digit (arbno digit)) number))) ;flotante negativo

; ESPECIFICACION GRAMÁTICA

(define gramatica
  '(
   (programa (expresion) un-programa)
   (expresion (cadena) cadena-exp)
   (expresion (numero) numero-lit)
   (expresion (identificador) var-exp)
   (expresion ("if" "("expresion")" "{" expresion "}" "else" "{"expresion"}") ;expresion condicional basada en c++
                condicional-exp) 
   (expresion ("declarar" definiciones ";"(arbno definiciones ";" ) "en" expresion) ;declaracion de variables basadas en java
                variableLocal-exp)
   (expresion ( "cambio" identificador "->" expresion )  cambiovalor-exp) ; cambio de valor de variable de asignación única
   (expresion ("("expresion primitiva-binaria expresion")")  primapp-bin-exp) ;primitivas binarias realizadas con notacion infija. Como en c++,java y python
   (expresion (primitiva-unaria expresion )  primapp-un-exp)
   (expresion ("def" "[" (separated-list identificador ",") "]"  expresion ) proc-exp) ; procedimientos basados en python
   (expresion ("evaluar" expresion "(" (separated-list expresion ",") ")") eval-proc) ;evaluacion de procedimientos basado en python
   (expresion ("recursivo" (arbno identificador "(" (separated-list identificador ",") ")" "{" expresion "}") "en" expresion) letrec-exp)
   (expresion ("false") false-exp) ;booleano
   (expresion ("true") true-exp)  ;booleano
   (expresion ("[" (separated-list expresion ",") "]")list-exp) ;listas basadas en python

   ;constantes (java)
   (definiciones ("final" identificador "=" expresion) constante-exp)
   ;variables de asignacion unica (java)
   (definiciones ("val" identificador "=" expresion) var-asign-unica-exp)
   (definiciones (identificador "=" "mezclaval") var-mezclaval)
   ;numeros en base distinta  a la decimal
   (expresion ("[x32" (arbno numero) "]") numero-base32)
   (expresion ("[x16"(arbno numero) "]") numero-base16)
   (expresion ("[x8" (arbno numero) "]") numero-base8)


   ;;;############## PRIMITIVAS DECIMALES ############## %%%
  ;primitivas unarias decimales
  (primitiva-unaria ("add1") primitiva-add1)
  (primitiva-unaria ("sub1") primitiva-sub1)
   
   ;primitivas binarias decimales
  (primitiva-binaria ("+") primitiva-suma)
  (primitiva-binaria ("-") primitiva-resta)
  (primitiva-binaria ("/") primitiva-div)
  (primitiva-binaria ("*") primitiva-mult)
  (primitiva-binaria ("%") primitiva-resto)

   ;;;############## PRIMITIVAS OCTALES ############## %%
    ;primitivas unarias octales
  (primitiva-unaria ("add1x8") primitiva-add1x8)
  (primitiva-unaria ("sub1x8") primitiva-sub1x8)
   
   ;primitivas binarias octales
  (primitiva-binaria ("+x8") primitiva-sumax8)
  (primitiva-binaria ("-x8") primitiva-restax8)
  (primitiva-binaria ("*x8") primitiva-multx8)
  
;#############################################################################################################################
 
     ;;;############## PRIMITIVAS HEXADECIMALES ############## %%%
    ;primitivas unarias hexadecimales
  (primitiva-unaria ("add1x16") primitiva-add1x16)
  (primitiva-unaria ("sub1x16") primitiva-sub1x16)
   
   ;primitivas binarias hexadecimales
  (primitiva-binaria ("+x16") primitiva-sumax16)
  (primitiva-binaria ("-x16") primitiva-restax16)
  (primitiva-binaria ("*x16") primitiva-multx16)

  ;#############################################################################################################################

       ;;;############## PRIMITIVAS BASE 32 ############## %%%
    ;primitivas unarias base 32
  (primitiva-unaria ("add1x32") primitiva-add1x32)
  (primitiva-unaria ("sub1x32") primitiva-sub1x32)
   
   ;primitivas binarias base 32
  (primitiva-binaria ("+x32") primitiva-sumax32)
  (primitiva-binaria ("-x32") primitiva-restax32)
  (primitiva-binaria ("*x32") primitiva-multx32)

  ;#############################################################################################################################

  
  ;booleanas binarias decimales
  (primitiva-binaria ("<") primitiva-menorQue)
  (primitiva-binaria (">") primitiva-mayorQue)
  (primitiva-binaria ("<=") primitiva-menorIgual)
  (primitiva-binaria (">=") primitiva-mayorIgual)
  (primitiva-binaria ("==") primitiva-igualQue)
  (primitiva-binaria ("!=") primitiva-diferenteQue)
  (primitiva-binaria ("and") primitiva-and)
  (primitiva-binaria ("or") primitiva-or)

  ;booleanas unarias decimales
  (primitiva-unaria ("not") primitiva-not)

  ;#############################################################################################################################

  ;primitivas unaria lista // string
  (primitiva-unaria ("longitud") primitiva-longitud)
  ;primitiva binaria string
  (primitiva-binaria ("concatenar") primitiva-concat)

  ;#############################################################################################################################

  ;primitivas sobre listas
  (primitiva-unaria ("null?") primitiva-null?)
  (primitiva-unaria ("emptyList") primitiva-null)
  (primitiva-unaria ("list?") primitiva-lista?)
  (primitiva-unaria ("first") primitiva-firstOfList)
  (primitiva-unaria ("resto") primitiva-restOfList)
  (primitiva-binaria ("unir") primitiva-unirListas)))

;############GENERAN LOS DATATYPES####################
(sllgen:make-define-datatypes lexica gramatica)

(define show-the-datatypes
  (lambda () (sllgen:list-define-datatypes lexica gramatica)))
;########################################################

( define scan&parse ;si le paso algo el tiene en cuenta la gramatica (reconoce datos que hayamos definido anteriormente numeros texto, etc)
   ( sllgen:make-string-parser ;lo retorna como estructura (scan&parse "9")
     lexica                    ; retorna #(struct:un-programa #(struct:numero-lit 9))
     gramatica ) )

(define just-scan ;no nos retorna la estructura, solo nos dice que tipo de dato es segun la lexica y en que linea se encuentra
  (sllgen:make-string-scanner lexica gramatica)) ;ejemplo (just-scan "@x 3" )
                                                 ;retorna #(struct:un-programa #(struct:numero-lit 9))

;Tipo de dato para la cerradura
(define-datatype procVal procVal?

  (cerradura (lista-ID (list-of symbol?))
             (exp expresion?)
             (amb environment?)))


;auxiliar para evaluar procedimientos
(define apply-procval (lambda (proc args)
                        (cases procVal proc
                          (cerradura (los exp env) (eval-exp exp  (extend-env los args env))))))

;El Interpretador (FrontEnd + Evaluación + señal para lectura )

(define interpretador
  (sllgen:make-rep-loop "DLG-->"
    (lambda (pgm) (eval-program  pgm))
    (sllgen:make-stream-parser 
      lexica
      gramatica)))

;El Interprete

;eval-program: <programa> -> numero
; función que evalúa un programa teniendo en cuenta un ambiente dado (se inicializa dentro del programa)

(define eval-program
  (lambda (pgm)
    (cases programa pgm
      (un-programa (exp) (eval-exp exp (init-env))))))

(define eval-exp (lambda (exp env)
                   (cases expresion exp
                     (numero-lit (n)n)
                     (numero-base32 (n) n )
                     (numero-base16 (n) n )
                     (numero-base8 (n) n )
                     (cadena-exp (n)n)
                     (var-exp (v) (buscar-variable env v) )
                     (primapp-bin-exp (exp1 prim exp2)
                                  (let (
                                        ;variables
                                        (valor1  (eval-exp exp1 env) )
                                        (valor2  (eval-exp exp2 env) ))
                                        ;cuerpo
                                        (eval-primitiva-bin valor1 valor2 prim)))
                     (primapp-un-exp (primUn exp)
                                     (let (
                                           (arg (eval-exp exp env)))
                                       (eval-primitiva-un primUn arg)))
                     (false-exp () #f)
                     (true-exp () #t)
                     (condicional-exp (test-exp true-exp false-exp) 
                                      (if (valor-verdad? (eval-exp test-exp env)) (eval-exp true-exp env)
                                          (eval-exp false-exp env)))
                     (proc-exp (ids cuerpo) (cerradura ids cuerpo env)  )
                     (eval-proc (proc args) (apply-procval (eval-exp proc env) (eval-rands args env) ))
                     (letrec-exp (procedimiento-name symbol cuerpo letrec-body)
                                 (eval-exp letrec-body
                                  (recursivo-extendido procedimiento-name symbol cuerpo env)
                                  ))
                     (list-exp (exps) (eval-rands exps env))
                     (else #t))))

;funcion que determina si la expresion de un condicional es cierta o falsa
(define valor-verdad?
  (lambda (x)
    (if (equal? x #t) #t #f)))

; funciones auxiliares para aplicar eval-expression a cada elemento de una 
; lista de operandos (expresiones)
(define eval-rands
  (lambda (rands env)
    (map (lambda (x) (eval-rand x env)) rands))) ;mapea el lambda con cada elemento de la lista de expresiones (le llegan en sintaxis abstracta) que le llega

(define eval-rand
  (lambda (rand env)
    (eval-exp rand env))) ;evalua cada elemento, para que al final así los cuerpos ya no estén en sitaxis abstracta y pueda aplicar el extended-env

(define eval-primitiva-bin (lambda (valor1 valor2 op)
                    (cases primitiva-binaria op
                      (primitiva-suma () (+ valor1 valor2))
                      (primitiva-resta () (- valor1 valor2))
                      (primitiva-mult () (* valor1 valor2))
                      (primitiva-div () (/ valor1 valor2))
                      (primitiva-concat () (string-append valor1 valor2))
                      (primitiva-resto () (remainder valor1 valor2))
                      ;
                      (primitiva-menorQue () (< valor1 valor2))
                      (primitiva-mayorQue () (> valor1 valor2))
                      (primitiva-menorIgual () (<= valor1 valor2))
                      (primitiva-mayorIgual () (>= valor1 valor2))
                      (primitiva-igualQue () (equal? valor1 valor2))
                      (primitiva-diferenteQue () (not(equal? valor1 valor2)))
                      (primitiva-and () (and (valor-verdad? valor1)(valor-verdad? valor2)))
                      (primitiva-or () (or (valor-verdad? valor1)(valor-verdad? valor2)))
                      ;Para octales
                      (primitiva-sumax8 () (suma valor1 valor2 8))
                      (primitiva-restax8 () (resta valor1 valor2 8))
                      (primitiva-multx8 () (multiplicacion valor1 valor2 8))
                      ;Para hexadecimales
                      (primitiva-sumax16 () (suma valor1 valor2 16))
                      (primitiva-restax16 () (resta valor1 valor2 16))
                      (primitiva-multx16 () (multiplicacion valor1 valor2 16))
                      ;Para base 32
                      (primitiva-sumax32 () (suma valor1 valor2 32))
                      (primitiva-restax32 () (resta valor1 valor2 32))
                      (primitiva-multx32 () (multiplicacion valor1 valor2 32))
                      ;listas
                      (primitiva-unirListas () (append valor1 valor2))
                      (else #t))))

;EVALUA PRIMITAVAS UNARIAS
(define eval-primitiva-un (lambda (primUn arg)
                    (cases primitiva-unaria primUn
                      (primitiva-add1 () (+ arg 1))
                      (primitiva-sub1 () (- arg 1))
                      ;para octales
                      (primitiva-add1x8 () (successor arg 8))
                      (primitiva-sub1x8 () (predecessor arg 8))
                      ;para hexadecimales
                      (primitiva-add1x16 () (successor arg 16))
                      (primitiva-sub1x16 () (predecessor arg 16))
                      ;para base 32
                      (primitiva-add1x32 () (successor arg 32))
                      (primitiva-sub1x32 () (predecessor arg 32))
                      ;
                      (primitiva-longitud () (string-length arg))
                      (primitiva-not () (not arg))
                      (primitiva-null? () (null? arg))
                      (primitiva-null () empty)
                      (primitiva-lista? () (list? arg))
                      (primitiva-firstOfList () (car arg))
                      (primitiva-restOfList () (cdr arg))
                      (else #t))))

;#############################REPRESENTACION BIGNUM QUE NOS AYUDA A HACER OPERACIONES EN BASE DISTINTA A LA DECIMAL################

;Zero: Función constructora que determina la representación del cero en bignum
( define zero ( lambda ( )'()))

;is-Zero?: Función observadora que retorna #t si el parametro que recibe es cero o #f en caso contrario
( define is-zero? ( lambda ( n ) (null? n)))

;succesor: Función constructora que recibe un número n en representación bignum y retorna el siguiente número (n+1) 
( define successor ( lambda ( n base) (if (is-zero? n)(list 1)
                                      (if (< (car n) (- base 1)) 
                                      (cons (+(car n) 1) (cdr n))
                                            (cons 0 (successor (cdr n) base))))) )

;predecessor: Función constructora que recibe un número (n+1) en representación bignum y retorna el número anterior (n)
(define predecessor (lambda (n base) (cond
                                  [(is-zero? n) (eopl:error "El cero no tiene predecesor")]
                                  [(and (= (car n) 1) (= (length n) 1)) '()]
                                  [(> (car n) 0) (cons (- (car n) 1) (cdr n))]
                                  [(= (car n) 0) (cons (- base 1) (predecessor (cdr n) base))])))

;CODIGO CLIENTE

(define suma
  (lambda (x y base)
    (if (is-zero? x)
        y
        (successor (suma (predecessor x base) y base) base))))

(define resta
  (lambda (x y base)
    (if (is-zero? y)
        x
        (predecessor (resta  x (predecessor y) base) base))))

(define multiplicacion
  (lambda (x y base)
    (if (is-zero? x)
        (zero)
        (suma (multiplicacion (predecessor x base) y base) y base))))

;##############TODO LO DE AMBIENTES (PARA QUE FUNCIONEN) necesarios siempre####################

;definición del tipo de dato ambiente

(define-datatype environment environment?
  (empty-env-record)
  (extended-env-record (syms (list-of symbol?))
                       (vals (list-of scheme-value?))
                       (env environment?))
  (recursivo-extendido           (procedimiento-name (list-of symbol?))
                                 (symbol (list-of (list-of symbol?)))
                                 (cuerpo (list-of expresion?))
                                 (env environment?))

  
 )

(define scheme-value? (lambda (v) #t))

;empty-env:      -> enviroment
;función que crea un ambiente vacío
(define empty-env  
  (lambda ()
    (empty-env-record)))       ;llamado al constructor de ambiente vacío 


;extend-env: <list-of symbols> <list-of numbers> enviroment -> enviroment
;función que crea un ambiente extendido
(define extend-env
  (lambda (syms vals env)
    (extended-env-record syms vals env)))

;Ambiente inicial vacío.
(define init-env
  (lambda ()
     (empty-env)))

;función que busca un símbolo en un ambiente
(define buscar-variable
  (lambda (env sym)
    (cases environment env
      (empty-env-record ()
                        (eopl:error "Error, la variable no existe"))
      (extended-env-record (syms vals env)
                           (let ((pos (list-find-position sym syms)))
                             (if (number? pos)
                                 (list-ref vals pos)
                                 (buscar-variable env sym))))
      (recursivo-extendido (procedimiento-name symbol cuerpo old-env)
                         (let ((pos (list-find-position sym procedimiento-name)))
                             (if (number? pos)
                                 (cerradura
                                           (list-ref symbol pos)
                                           (list-ref cuerpo pos)
                                           env)
                                 (buscar-variable old-env sym )
                                 ))))))

;****************************************************************************************
;Funciones Auxiliares

; funciones auxiliares para encontrar la posición de un símbolo
; en la lista de símbolos de unambiente

(define list-find-position
  (lambda (sym los)
    (list-index (lambda (sym1) (eqv? sym1 sym)) los)))

(define list-index
  (lambda (pred ls)
    (cond
      ((null? ls) #f)
      ((pred (car ls)) 0)
      (else (let ((list-index-r (list-index pred (cdr ls))))
              (if (number? list-index-r)
                (+ list-index-r 1)
                #f))))))


;######################################################################################################
;######################################################################################################
;EJEMPLOS DE CADA PRODUCCION
(scan&parse "x") ;variable
(scan&parse "if (true) {(9+1)} else {false}") ; concional

(scan&parse "add1 5") ;primitivas unarias para decimales
(scan&parse "(5 + 5)") ;primitivas  binarias para decimales
(scan&parse " ([x32 0 1] +x32 [x32 9]) ") ;primitivas binarias base 32
(scan&parse " ([x8 0 1] +x8 [x8 1]) ") ;primitivas binarias octales
(scan&parse " ([x16 0 1] +x16 [x16 1]) ") ;primitivas binarias hexadecimales

(scan&parse " (3 > 5) ") ;primitiva binaria booleana
(scan&parse " not 3") ;primitiva unaria booleana



(scan&parse "def [w,z] (w+z)") ;definicion de procedimientos
(scan&parse "evaluar funcion(2,3,r)") ;evaluar procedimientos

(scan&parse "recursivo nada(s,q,x) { ((s*q)+x) } en evaluar nada(1,2,3)") ;procedimientos recursivos

(scan&parse "[1,2,true,[x8 2],78]") ;listas 
(scan&parse "null? [1,3]") ;primitiva unaria para listas
(scan&parse "([1,2,true,[x8 2],78] unir [1, 2, 3])") ;primitiva binaria de listas

(scan&parse "declarar val x=9; y=mezclaval; en 1024") ;declaracion de variables
(scan&parse "declarar val e = 811; en 6") ;Variable de asignación única
(scan&parse "declarar final jajajjjsisas = 811; en 5") ;Variable de asignación única

