#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 69 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 3599 0 29 3 10 #"#lang eopl"
0 0 25 29 1 #"\n"
0 0 17 3 68
#";################### PROYECTO FINAL FLP ############################"
0 0 25 29 1 #"\n"
0 0 17 3 75
(4
 #";Alexis Diego Timan\303\241 Romero (1870385)  alexis.timana@correoun"
 #"ivalle.edu.co"
) 0 0 25 29 1 #"\n"
0 0 17 3 80
(5
 #";Luis Eduardo Ruiz Casta\303\261o (1831986)   luis.eduardo.ruiz@corr"
 #"eounivalle.edu.co "
) 0 0 25 29 1 #"\n"
0 0 17 3 76
(6
 #";Gabriel De Jes\303\272s Arango (1823077)     gabriel.arango@correou"
 #"nivalle.edu.co"
) 0 0 25 29 1 #"\n"
0 0 17 3 62
#";#############################################################"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";SINTAXIS BASADA EN PYTHON, JAVA Y C++"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #"; ESPECIFICACI\303\223N L\303\211XICA"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 25 29 1 #"\n"
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 25 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 25 3 2 #") "
0 0 14 3 4 #"skip"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"comentario"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"#\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 22 3 9 #"#\\newline"
0 0 25 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 25 3 2 #") "
0 0 17 3 30 #";comentarios basados en python"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"cadena"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"\\\"\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 22 3 9 #"#\\newline"
0 0 25 3 2 #"))"
0 0 19 3 4 #"\"\\\"\""
0 0 25 3 3 #" ) "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #" ) "
0 0 17 3 7 #";String"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"identificador"
0 0 25 3 2 #" ("
0 0 14 3 6 #"letter"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 14 3 6 #"letter"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 25 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #") "
0 0 17 3 26 #";identificador de variable"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"numero"
0 0 25 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 3 #")) "
0 0 14 3 6 #"number"
0 0 25 3 2 #") "
0 0 17 3 7 #";entero"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"numero"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 3 #")) "
0 0 14 3 6 #"number"
0 0 25 3 2 #") "
0 0 17 3 16 #";entero negativo"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"numero"
0 0 25 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 3 #")) "
0 0 14 3 6 #"number"
0 0 25 3 2 #") "
0 0 17 3 9 #";flotante"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"numero"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #") "
0 0 19 3 3 #"\".\""
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 3 #")) "
0 0 14 3 6 #"number"
0 0 25 3 4 #"))) "
0 0 17 3 18 #";flotante negativo"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"; ESPECIFICACION GRAM\303\201TICA"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 8 #"programa"
0 0 25 3 2 #" ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #") "
0 0 14 3 11 #"un-programa"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 14 3 6 #"cadena"
0 0 25 3 2 #") "
0 0 14 3 10 #"cadena-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 14 3 6 #"numero"
0 0 25 3 2 #") "
0 0 14 3 10 #"numero-lit"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 14 3 13 #"identificador"
0 0 25 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 14 3 9 #"expresion"
0 0 19 3 3 #"\")\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 25 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 14 3 9 #"expresion"
0 0 19 3 3 #"\"}\""
0 0 25 3 2 #") "
0 0 14 3 15 #"condicional-exp"
0 0 25 3 2 #") "
0 0 17 3 39 #";expresion condicional basada en c++   "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"(\""
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 19 3 3 #"\")\""
0 0 25 3 3 #")  "
0 0 14 3 15 #"primapp-bin-exp"
0 0 25 3 2 #") "
0 0 17 3 78
(7
 #";primitivas binarias realizadas con notacion infija. Como en c++,jav"
 #"a y python"
) 0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 4 #" )  "
0 0 14 3 14 #"primapp-un-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"def\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 25 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 25 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 25 3 2 #"  "
0 0 14 3 9 #"expresion"
0 0 25 3 3 #" ) "
0 0 14 3 8 #"proc-exp"
0 0 25 3 2 #") "
0 0 17 3 34 #"; procedimientos basados en python"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 9 #"\"evaluar\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 25 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 25 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 25 3 2 #") "
0 0 14 3 9 #"eval-proc"
0 0 25 3 2 #") "
0 0 17 3 46 #";evaluacion de procedimientos basado en python"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 11 #"\"recursivo\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 25 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 25 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"{\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 25 3 2 #") "
0 0 19 3 4 #"\"en\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 2 #") "
0 0 14 3 10 #"letrec-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"false\""
0 0 25 3 2 #") "
0 0 14 3 9 #"false-exp"
0 0 25 3 2 #") "
0 0 17 3 9 #";booleano"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"true\""
0 0 25 3 2 #") "
0 0 14 3 8 #"true-exp"
0 0 25 3 3 #")  "
0 0 17 3 9 #";booleano"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"[\""
0 0 25 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 25 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 25 3 1 #")"
0 0 14 3 8 #"list-exp"
0 0 25 3 2 #") "
0 0 17 3 25 #";listas basadas en python"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 10 #"\"declarar\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 15 3 12 #"definiciones"
0 0 25 3 3 #" ) "
0 0 19 3 4 #"\"en\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 2 #") "
0 0 14 3 12 #"variable-exp"
0 0 25 3 2 #") "
0 0 17 3 41 #";declaracion de variables basadas en java"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 3 #" ( "
0 0 19 3 8 #"\"cambio\""
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 4 #"\"->\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 4 #" )  "
0 0 14 3 15 #"cambiovalor-exp"
0 0 25 3 2 #") "
0 0 17 3 51
#"; cambio de valor de variable de asignaci\303\263n \303\272nica"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 18 #";constantes (java)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 12 #"definiciones"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"final\""
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 2 #") "
0 0 14 3 13 #"constante-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 37 #";variables de asignacion unica (java)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 12 #"definiciones"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"val\""
0 0 25 3 1 #" "
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 2 #") "
0 0 14 3 19 #"var-asign-unica-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 12 #"definiciones"
0 0 25 3 2 #" ("
0 0 14 3 13 #"identificador"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 25 3 1 #" "
0 0 19 3 12 #"\"mezclaval;\""
0 0 25 3 2 #") "
0 0 14 3 13 #"var-mezclaval"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 39 #";numeros en base distinta  a la decimal"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 1 #"\""
0 0 19 3 5 #"[x32\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 6 #"numero"
0 0 25 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 25 3 2 #") "
0 0 14 3 13 #"numero-base32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 1 #"\""
0 0 19 3 5 #"[x16\""
0 0 25 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 6 #"numero"
0 0 25 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 25 3 2 #") "
0 0 14 3 13 #"numero-base16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 1 #"\""
0 0 19 3 4 #"[x8\""
0 0 25 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 14 3 6 #"numero"
0 0 25 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 25 3 2 #") "
0 0 14 3 12 #"numero-base8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 57 #";;;############## PRIMITIVAS DECIMALES ############## %%%"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 29 #";primitivas unarias decimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"add1\""
0 0 25 3 2 #") "
0 0 14 3 14 #"primitiva-add1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"sub1\""
0 0 25 3 2 #") "
0 0 14 3 14 #"primitiva-sub1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 30 #";primitivas binarias decimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 25 3 2 #") "
0 0 14 3 14 #"primitiva-suma"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 25 3 2 #") "
0 0 14 3 15 #"primitiva-resta"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 25 3 2 #") "
0 0 14 3 13 #"primitiva-div"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 25 3 2 #") "
0 0 14 3 14 #"primitiva-mult"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 25 3 2 #") "
0 0 14 3 15 #"primitiva-resto"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 54 #";;;############## PRIMITIVAS OCTALES ############## %%"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 27 #";primitivas unarias octales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 8 #"\"add1x8\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-add1x8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 8 #"\"sub1x8\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-sub1x8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 28 #";primitivas binarias octales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"+x8\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-sumax8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"-x8\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-restax8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"*x8\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-multx8"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 61
#";;;############## PRIMITIVAS HEXADECIMALES ############## %%%"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 33 #";primitivas unarias hexadecimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 9 #"\"add1x16\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-add1x16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 9 #"\"sub1x16\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-sub1x16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 34 #";primitivas binarias hexadecimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"+x16\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-sumax16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"-x16\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-restax16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"*x16\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-multx16"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 55 #";;;############## PRIMITIVAS BASE 32 ############## %%%"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 27 #";primitivas unarias base 32"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 9 #"\"add1x32\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-add1x32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 9 #"\"sub1x32\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-sub1x32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 28 #";primitivas binarias base 32"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"+x32\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-sumax32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"-x32\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-restax32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"*x32\""
0 0 25 3 2 #") "
0 0 14 3 17 #"primitiva-multx32"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 29 #";booleanas binarias decimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-menorQue"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-mayorQue"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 25 3 2 #") "
0 0 14 3 20 #"primitiva-menorIgual"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 25 3 2 #") "
0 0 14 3 20 #"primitiva-mayorIgual"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-igualQue"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"!=\""
0 0 25 3 2 #") "
0 0 14 3 22 #"primitiva-diferenteQue"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 25 3 2 #") "
0 0 14 3 13 #"primitiva-and"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 25 3 2 #") "
0 0 14 3 12 #"primitiva-or"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 28 #";booleanas unarias decimales"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 25 3 2 #") "
0 0 14 3 13 #"primitiva-not"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 34 #";primitivas unaria lista // string"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 10 #"\"longitud\""
0 0 25 3 2 #") "
0 0 14 3 18 #"primitiva-longitud"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 25 #";primitiva binaria string"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 12 #"\"concatenar\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-concat"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 24 #";primitivas sobre listas"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"null?\""
0 0 25 3 2 #") "
0 0 14 3 15 #"primitiva-null?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 11 #"\"emptyList\""
0 0 25 3 2 #") "
0 0 14 3 14 #"primitiva-null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"list?\""
0 0 25 3 2 #") "
0 0 14 3 16 #"primitiva-lista?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"first\""
0 0 25 3 2 #") "
0 0 14 3 21 #"primitiva-firstOfList"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 2 #" ("
0 0 19 3 7 #"\"resto\""
0 0 25 3 2 #") "
0 0 14 3 20 #"primitiva-restOfList"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 2 #" ("
0 0 19 3 6 #"\"unir\""
0 0 25 3 2 #") "
0 0 14 3 20 #"primitiva-unirListas"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";############GENERAN LOS DATATYPES####################"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 25 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 25 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 25 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 25 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 73
(8
 #";FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241cti"
 #"co (parser) integrados)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"( "
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 17 3 119
(9
 #";si le paso algo el tiene en cuenta la gramatica (reconoce datos que"
 #" hayamos definido anteriormente numeros texto, etc)"
) 0 0 25 29 1 #"\n"
0 0 25 3 5 #"   ( "
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 25 3 1 #" "
0 0 17 3 44 #";lo retorna como estructura (scan&parse \"9\")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 6 #"lexica"
0 0 25 3 20 #"                    "
0 0 17 3 54 #"; retorna #(struct:un-programa #(struct:numero-lit 9))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 9 #"gramatica"
0 0 25 3 4 #" ) )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";Analizador l\303\251xico"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 25 3 1 #" "
0 0 17 3 108
(10
 #";no nos retorna la estructura, solo nos dice que tipo de dato es seg"
 #"un la lexica y en que linea se encuentra"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 25 3 1 #" "
0 0 14 3 6 #"lexica"
0 0 25 3 1 #" "
0 0 14 3 9 #"gramatica"
0 0 25 3 3 #")) "
0 0 17 3 21 #";ejemplo (just-scan \""
0 0 17 3 2 #"@x"
0 0 17 3 5 #" 3\" )"
0 0 25 29 1 #"\n"
0 0 25 3 49 #"                                                 "
0 0 17 3 53 #";retorna #(struct:un-programa #(struct:numero-lit 9))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 65
(11
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"DLG-->\""
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 25 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 25 3 2 #"  "
0 0 14 3 3 #"pgm"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 6 #"lexica"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 9 #"gramatica"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 14 #";El Interprete"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";eval-program: <programa> -> numero"
0 0 25 29 1 #"\n"
0 0 17 3 106
(12
 #"; funci\303\263n que eval\303\272a un programa teniendo en cuenta un"
 #" ambiente dado (se inicializa dentro del programa)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"eval-program"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 8 #"programa"
0 0 25 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 11 #"un-programa"
0 0 25 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 25 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";Evaluador de expresiones"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"numero-lit"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"numero-base32"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"numero-base16"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 12 #"numero-base8"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"cadena-exp"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 25 3 2 #" ("
0 0 14 3 1 #"v"
0 0 25 3 3 #") ("
0 0 14 3 15 #"buscar-variable"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 15 #"primapp-bin-exp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 25 3 1 #" "
0 0 14 3 4 #"prim"
0 0 25 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 15 3 3 #"let"
0 0 25 3 2 #" ("
0 0 17 3 10 #";variables"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 14 3 6 #"valor1"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") )"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 14 3 6 #"valor2"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #") ))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                         "
0 0 17 3 7 #";cuerpo"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 18 #"eval-primitiva-bin"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 14 3 4 #"prim"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 14 #"primapp-un-exp"
0 0 25 3 2 #" ("
0 0 14 3 6 #"primUn"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"arg"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 17 #"eval-primitiva-un"
0 0 25 3 1 #" "
0 0 14 3 6 #"primUn"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"false-exp"
0 0 25 3 4 #" () "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 8 #"true-exp"
0 0 25 3 4 #" () "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 15 #"condicional-exp"
0 0 25 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 25 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 25 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 13 #"valor-verdad?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 8 #"test-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #")) ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 3 3 #") ("
0 0 14 3 9 #"cerradura"
0 0 25 3 1 #" "
0 0 14 3 3 #"ids"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #")  )"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 9 #"eval-proc"
0 0 25 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 3 #") ("
0 0 14 3 13 #"apply-procval"
0 0 25 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 10 #"eval-rands"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #") ))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 8 #"list-exp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 25 3 3 #") ("
0 0 14 3 10 #"eval-rands"
0 0 25 3 1 #" "
0 0 14 3 4 #"exps"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 25 3 2 #" ("
0 0 14 3 18 #"procedimiento-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 25 3 2 #" ("
0 0 14 3 22 #"extend-env-recursively"
0 0 25 3 1 #" "
0 0 14 3 18 #"procedimiento-name"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 12 #"variable-exp"
0 0 25 3 2 #" ("
0 0 14 3 7 #"lis-def"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"args"
0 0 25 3 2 #" ("
0 0 14 3 9 #"eval-defs"
0 0 25 3 1 #" "
0 0 14 3 7 #"lis-def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 3 #"ids"
0 0 25 3 2 #" ("
0 0 14 3 7 #"sacar-i"
0 0 14 3 6 #"d-defs"
0 0 25 3 1 #" "
0 0 14 3 7 #"lis-def"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 6 #"cuerpo"
0 0 25 29 1 #"\n"
0 0 25 3 35 #"                                  ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"ids"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 15 #"cambiovalor-exp"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 10 #"buscar-def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"Error, la variable\""
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"ya-"
0 0 14 3 14 #"est\303\241-asignada"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 25 3 2 #" ("
0 0 14 3 17 #"buscar-referencia"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                        "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9         145 22           0 0           0 23 0 25 3 1 #"("
0 0 14 3 9 #"expresion"
0 0 25 3 2 #" ("
0 0 19 3 10 #"\"declarar\""
0 0 25 3 1 #" "
0 0 15 3 12 #"definiciones"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 1 #"("
0 0 14 3 5 #"arbno"
0 0 25 3 1 #" "
0 0 15 3 12 #"definiciones"
0 0 25 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 25 3 3 #" ) "
0 0 19 3 4 #"\"en\""
0 0 25 3 1 #" "
0 0 14 3 9 #"expresion"
0 0 25 3 2 #") "
0 0 14 3 12 #"variable-exp"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 75
(13
 #"; funciones auxiliares para aplicar eval-expression a cada elemento "
 #"de una "
) 0 0 25 29 1 #"\n"
0 0 17 3 34 #"; lista de operandos (expresiones)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 9 #"eval-rand"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 25 3 4 #"))) "
0 0 17 3 108
(14
 #";mapea el lambda con cada elemento de la lista de expresiones (le ll"
 #"egan en sintaxis abstracta) que le llega"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 4 #"rand"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))) "
0 0 17 3 123
(15
 #";evalua cada elemento, para que al final as\303\255 los cuerpos ya n"
 #"o est\303\251n en sitaxis abstracta y pueda aplicar el extended-env"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";Funcion para evaluar primitivas binarias"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"eval-primitiva-bin"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 17 #"primitiva-binaria"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"primitiva-suma"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 15 #"primitiva-resta"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"primitiva-mult"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 13 #"primitiva-div"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-concat"
0 0 25 3 5 #" () ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 15 #"primitiva-resto"
0 0 25 3 5 #" () ("
0 0 14 3 9 #"remainder"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-menorQue"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-mayorQue"
0 0 25 3 5 #" () ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 20 #"primitiva-menorIgual"
0 0 25 3 5 #" () ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 20 #"primitiva-mayorIgual"
0 0 25 3 5 #" () ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-igualQue"
0 0 25 3 5 #" () ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 22 #"primitiva-diferenteQue"
0 0 25 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 25 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 13 #"primitiva-and"
0 0 25 3 5 #" () ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 13 #"valor-verdad?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 2 #")("
0 0 14 3 13 #"valor-verdad?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 12 #"primitiva-or"
0 0 25 3 5 #" () ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 13 #"valor-verdad?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 2 #")("
0 0 14 3 13 #"valor-verdad?"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 13 #";Para octales"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-sumax8"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-restax8"
0 0 25 3 5 #" () ("
0 0 14 3 5 #"resta"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-multx8"
0 0 25 3 5 #" () ("
0 0 14 3 14 #"multiplicacion"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 19 #";Para hexadecimales"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-sumax16"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-restax16"
0 0 25 3 5 #" () ("
0 0 14 3 5 #"resta"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-multx16"
0 0 25 3 5 #" () ("
0 0 14 3 14 #"multiplicacion"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 13 #";Para base 32"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-sumax32"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"suma"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-restax32"
0 0 25 3 5 #" () ("
0 0 14 3 5 #"resta"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-multx32"
0 0 25 3 5 #" () ("
0 0 14 3 14 #"multiplicacion"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 7 #";listas"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 20 #"primitiva-unirListas"
0 0 25 3 5 #" () ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor1"
0 0 25 3 1 #" "
0 0 14 3 6 #"valor2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 26 #";EVALUA PRIMITAVAS UNARIAS"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"eval-primitiva-un"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 6 #"primUn"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 16 #"primitiva-unaria"
0 0 25 3 1 #" "
0 0 14 3 6 #"primUn"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"primitiva-add1"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"primitiva-sub1"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 13 #";para octales"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-add1x8"
0 0 25 3 5 #" () ("
0 0 14 3 9 #"successor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-sub1x8"
0 0 25 3 5 #" () ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 19 #";para hexadecimales"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-add1x16"
0 0 25 3 5 #" () ("
0 0 14 3 9 #"successor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-sub1x16"
0 0 25 3 5 #" () ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 13 #";para base 32"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-add1x32"
0 0 25 3 5 #" () ("
0 0 14 3 9 #"successor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 17 #"primitiva-sub1x32"
0 0 25 3 5 #" () ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                      "
0 0 17 3 1 #";"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 18 #"primitiva-longitud"
0 0 25 3 5 #" () ("
0 0 14 3 13 #"string-length"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 13 #"primitiva-not"
0 0 25 3 5 #" () ("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 15 #"primitiva-null?"
0 0 25 3 5 #" () ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 14 #"primitiva-null"
0 0 25 3 4 #" () "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 16 #"primitiva-lista?"
0 0 25 3 5 #" () ("
0 0 14 3 5 #"list?"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 21 #"primitiva-firstOfList"
0 0 25 3 5 #" () ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 20 #"primitiva-restOfList"
0 0 25 3 5 #" () ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 131
(16
 #";#############################REPRESENTACION BIGNUM QUE NOS AYUDA A "
 #"HACER OPERACIONES EN BASE DISTINTA A LA DECIMAL################"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 80
(17
 #";Zero: Funci\303\263n constructora que determina la representaci\303"
 #"\263n del cero en bignum"
) 0 0 25 29 1 #"\n"
0 0 25 3 2 #"( "
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"zero"
0 0 25 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 25 3 4 #" ( )"
0 0 22 3 1 #"'"
0 0 25 3 4 #"()))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 104
(18
 #";is-Zero?: Funci\303\263n observadora que retorna #t si el parametro"
 #" que recibe es cero o #f en caso contrario"
) 0 0 25 29 1 #"\n"
0 0 25 3 2 #"( "
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"is-zero?"
0 0 25 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ( "
0 0 14 3 1 #"n"
0 0 25 3 4 #" ) ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 120
(19
 #";succesor: Funci\303\263n constructora que recibe un n\303\272mero n"
 #" en representaci\303\263n bignum y retorna el siguiente n\303\272mer"
 #"o (n+1) "
) 0 0 25 29 1 #"\n"
0 0 25 3 2 #"( "
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"successor"
0 0 25 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ( "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #")("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #"("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 45 #"                                            ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 4 #"base"
0 0 25 3 7 #"))))) )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 123
(20
 #";predecessor: Funci\303\263n constructora que recibe un n\303\272mer"
 #"o (n+1) en representaci\303\263n bignum y retorna el n\303\272mero a"
 #"nterior (n)"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"predecessor"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 8 #"is-zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"El cero no tiene predecesor\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 3 #"()]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 36 #"                                  [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 11 #"predecessor"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 4 #"base"
0 0 25 3 6 #"))])))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #";CODIGO CLIENTE"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"suma"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"y"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"successor"
0 0 25 3 2 #" ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 2 #") "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 2 #") "
0 0 14 3 4 #"base"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"resta"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 14 3 1 #"x"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 11 #"predecessor"
0 0 25 3 2 #" ("
0 0 14 3 5 #"resta"
0 0 25 3 2 #"  "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #") "
0 0 14 3 4 #"base"
0 0 25 3 2 #") "
0 0 14 3 4 #"base"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 14 #"multiplicacion"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"zero"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"suma"
0 0 25 3 2 #" ("
0 0 14 3 14 #"multiplicacion"
0 0 25 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 2 #") "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 2 #") "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 4 #"base"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(21
 #";funcion que determina si la expresion de un condicional es cierta o"
 #" falsa"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"valor-verdad?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";Tipo de dato para la cerradura"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 25 3 1 #" "
0 0 14 3 7 #"procVal"
0 0 25 3 1 #" "
0 0 14 3 8 #"procVal?"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"cerradura"
0 0 25 3 2 #" ("
0 0 14 3 8 #"lista-ID"
0 0 25 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 25 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 10 #"expresion?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 3 #"amb"
0 0 25 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";auxiliar para evaluar procedimientos"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"apply-procval"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 7 #"procVal"
0 0 25 3 1 #" "
0 0 14 3 4 #"proc"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 9 #"cerradura"
0 0 25 3 2 #" ("
0 0 14 3 3 #"los"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 3 #"exp"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 3 #"los"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 79
(22
 #";Funcion para evaluar definiciones (variables de asignacion unica y "
 #"constantes)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"eval-def"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 15 3 3 #"def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 15 3 12 #"definiciones"
0 0 25 3 1 #" "
0 0 15 3 3 #"def"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"constante-exp"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 4 #"busc"
0 0 14 3 6 #"ar-def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 7 #"eval-ex"
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 10 #"eopl:error"
0 0 25 3 1 #" "
0 0 19 3 60
#"\"Error, est\303\241 tratando de cambiar el valor de una constante\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"var-asign-unica-exp"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 10 #"buscar-def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 2 #"id"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 8 #"eval-exp"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 14 3 10 #"eopl:error"
0 0 25 3 1 #" "
0 0 19 3 81
(23
 #"\"Error, est\303\241 tratando de cambiar el valor de una variable de"
 #" asignaci\303\263n \303\272nica\""
) 0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"var-mezclaval"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 2 #") "
0 0 19 3 2 #"\"?"
0 0 19 3 1 #"\""
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 57
#";funci\303\263n para evaluar varias definiciones en el ambiente"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"eval-defs"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 15 3 4 #"defs"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 8 #"eval-def"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")) "
0 0 15 3 4 #"defs"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 66
(24
 #";funci\303\263n para sacar el id de una definicion dentro de un ambi"
 #"ente"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"sacar-id"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 15 3 3 #"def"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 15 3 12 #"definiciones"
0 0 25 3 1 #" "
0 0 15 3 3 #"def"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"constante-exp"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 2 #") "
0 0 14 3 2 #"id"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"var-asign-unica-exp"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 1 #" "
0 0 14 3 5 #"valor"
0 0 25 3 2 #") "
0 0 14 3 2 #"id"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 13 #"var-mezclaval"
0 0 25 3 2 #" ("
0 0 14 3 2 #"id"
0 0 25 3 2 #") "
0 0 14 3 2 #"id"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"sacar-id-defs"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 15 3 4 #"defs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 8 #"sacar-id"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 15 3 4 #"defs"
0 0 25 3 4 #"))) "
0 0 17 3 108 14 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 95
(25
 #";##############TODO LO DE AMBIENTES (PARA QUE FUNCIONEN) necesarios "
 #"siempre####################"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 25 3 1 #" "
0 0 14 3 11 #"environment"
0 0 25 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 25 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 25 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 25 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"v"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 25 3 10 #")))       "
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 73
(26
 #";extend-env: <list-of symbols> <list-of numbers> enviroment -> envir"
 #"oment"
) 0 0 25 29 1 #"\n"
0 0 17 3 40 #";funci\303\263n que crea un ambiente extendido"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 19 #"extended-env-record"
0 0 25 3 1 #" "
0 0 14 3 4 #"syms"
0 0 25 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 119
(27
 #";extend-env-recursively: <list-of symbols> <list-of <list-of symbols"
 #">> <list-of expressions> environment -> environment"
) 0 0 25 29 1 #"\n"
0 0 17 3 71
(28
 #";funci\303\263n que crea un ambiente extendido para procedimientos r"
 #"ecursivos"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 22 #"extend-env-recursively"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 25 3 1 #" "
0 0 14 3 4 #"idss"
0 0 25 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 25 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"vec"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"env"
0 0 25 3 2 #" ("
0 0 14 3 19 #"extended-env-record"
0 0 25 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 8 #"for-each"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 3 #"ids"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 2 #" ("
0 0 14 3 9 #"cerradura"
0 0 25 3 1 #" "
0 0 14 3 3 #"ids"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"iota"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #") "
0 0 14 3 4 #"idss"
0 0 25 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 14 3 3 #"env"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";Ambiente inicial vac\303\255o."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"empty-env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";iota: number -> list"
0 0 25 29 1 #"\n"
0 0 17 3 65
(29
 #";funci\303\263n que retorna una lista de los n\303\272meros desde 0 "
 #"hasta end"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"iota"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 3 #"end"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46
#";funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"buscar-variable"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 5 #"deref"
0 0 25 3 2 #" ("
0 0 14 3 17 #"buscar-referencia"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"buscar-referencia"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 11 #"environment"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 13 #"apply-env-ref"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 7 #"binding"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 3 #" ~s"
0 0 19 3 1 #"\""
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 25 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 25 3 2 #" ("
0 0 14 3 18 #"list-find-position"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 1 #" "
0 0 14 3 4 #"syms"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 17 #"buscar-referencia"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 97
(30
 #";Referencias -------------------------------------------------------"
 #"-----------------------------"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 25 3 1 #" "
0 0 14 3 9 #"reference"
0 0 25 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"a-ref"
0 0 25 3 2 #" ("
0 0 14 3 8 #"position"
0 0 25 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"deref"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 15 #"primitive-deref"
0 0 25 3 1 #" "
0 0 14 3 3 #"ref"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"primitive-deref"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 9 #"reference"
0 0 25 3 1 #" "
0 0 14 3 3 #"ref"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 25 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 17 #"primitive-setref!"
0 0 25 3 1 #" "
0 0 14 3 3 #"ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"primitive-setref!"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 9 #"reference"
0 0 25 3 1 #" "
0 0 14 3 3 #"ref"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 25 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 3 #"val"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 110
(31
 #";Funciones Auxiliares **********************************************"
 #"******************************************"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 65
(32
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 25 29 1 #"\n"
0 0 17 3 41 #"; en la lista de s\303\255mbolos de un ambiente"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 25 3 1 #" "
0 0 14 3 3 #"los"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 25 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 3 #")) "
0 0 14 3 3 #"los"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 3 #")) "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 25 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 25 3 1 #" "
0 0 14 3 4 #"pred"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 22 3 2 #"#f"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 95
(33
 #";Funcion para buscar si una constante o variable de asignaci\303\263"
 #"n \303\272nica ya existe en un ambiente"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"busc"
0 0 14 3 6 #"ar-def"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 11 #"environment"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 25 3 4 #" () "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 25 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 25 3 1 #" "
0 0 14 3 4 #"vals"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 25 3 2 #" ("
0 0 14 3 18 #"list-find-position"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 1 #" "
0 0 14 3 4 #"syms"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 49 #"                                                 "
0 0 22 3 2 #"#t"
0 0 25 29 1 #"\n"
0 0 25 3 50 #"                                                 ("
0 0 14 3 10 #"buscar-def"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 3 #"sym"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 103
(34
 #";###################################################################"
 #"###################################"
) 0 0 25 29 1 #"\n"
0 0 17 3 28 #";EJEMPLOS DE CADA PRODUCCION"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 2 #"\"x"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 9 #";variable"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"if"
0 0 19 3 2 #" ("
0 0 19 3 4 #"true"
0 0 19 3 4 #") {("
0 0 19 3 3 #"9+1"
0 0 19 3 3 #")} "
0 0 19 3 4 #"else"
0 0 19 3 2 #" {"
0 0 19 3 6 #"false}"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 11 #"; concional"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"add1"
0 0 19 3 2 #" 5"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 34 #";primitivas unarias para decimales"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"("
0 0 19 3 1 #"5"
0 0 19 3 1 #" "
0 0 19 3 1 #"+"
0 0 19 3 1 #" "
0 0 19 3 2 #"5)"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 36 #";primitivas  binarias para decimales"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #" (["
0 0 19 3 3 #"x32"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 2 #"] "
0 0 19 3 4 #"+x32"
0 0 19 3 2 #" ["
0 0 19 3 3 #"x32"
0 0 19 3 1 #" "
0 0 19 3 4 #"9]) "
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 28 #";primitivas binarias base 32"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #" (["
0 0 19 3 2 #"x8"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 2 #"] "
0 0 19 3 3 #"+x8"
0 0 19 3 2 #" ["
0 0 19 3 2 #"x8"
0 0 19 3 1 #" "
0 0 19 3 4 #"1]) "
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 28 #";primitivas binarias octales"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #" (["
0 0 19 3 3 #"x16"
0 0 19 3 1 #" "
0 0 19 3 1 #"0"
0 0 19 3 1 #" "
0 0 19 3 1 #"1"
0 0 19 3 2 #"] "
0 0 19 3 4 #"+x16"
0 0 19 3 2 #" ["
0 0 19 3 3 #"x16"
0 0 19 3 1 #" "
0 0 19 3 4 #"1]) "
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 34 #";primitivas binarias hexadecimales"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #" ("
0 0 19 3 1 #"3"
0 0 19 3 1 #" "
0 0 19 3 1 #">"
0 0 19 3 1 #" "
0 0 19 3 3 #"5) "
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 27 #";primitiva binaria booleana"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 2 #" 3"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 26 #";primitiva unaria booleana"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"def"
0 0 19 3 2 #" ["
0 0 19 3 1 #"w"
0 0 19 3 1 #","
0 0 19 3 1 #"z"
0 0 19 3 3 #"] ("
0 0 19 3 4 #"w+z)"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 29 #";definicion de procedimientos"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"evaluar"
0 0 19 3 1 #" "
0 0 19 3 7 #"funcion"
0 0 19 3 1 #"("
0 0 19 3 1 #"2"
0 0 19 3 1 #","
0 0 19 3 1 #"3"
0 0 19 3 1 #","
0 0 19 3 2 #"r)"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 23 #";evaluar procedimientos"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"recursivo"
0 0 19 3 1 #" "
0 0 19 3 4 #"nada"
0 0 19 3 1 #"("
0 0 19 3 1 #"s"
0 0 19 3 1 #","
0 0 19 3 1 #"q"
0 0 19 3 1 #","
0 0 19 3 1 #"x"
0 0 19 3 6 #") { (("
0 0 19 3 3 #"s*q"
0 0 19 3 1 #")"
0 0 19 3 2 #"+x"
0 0 19 3 4 #") } "
0 0 19 3 2 #"en"
0 0 19 3 1 #" "
0 0 19 3 7 #"evaluar"
0 0 19 3 1 #" "
0 0 19 3 4 #"nada"
0 0 19 3 1 #"("
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 1 #"2"
0 0 19 3 1 #","
0 0 19 3 2 #"3)"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 26 #";procedimientos recursivos"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"["
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 1 #"2"
0 0 19 3 1 #","
0 0 19 3 4 #"true"
0 0 19 3 1 #","
0 0 19 3 1 #"["
0 0 19 3 2 #"x8"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #"]"
0 0 19 3 1 #","
0 0 19 3 3 #"78]"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 8 #";listas "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"null?"
0 0 19 3 2 #" ["
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 2 #"3]"
0 0 19 3 1 #"\""
0 0 25 3 2 #") "
0 0 17 3 29 #";primitiva unaria para listas"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"(["
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 1 #"2"
0 0 19 3 1 #","
0 0 19 3 4 #"true"
0 0 19 3 1 #","
0 0 19 3 1 #"["
0 0 19 3 2 #"x8"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #"]"
0 0 19 3 1 #","
0 0 19 3 2 #"78"
0 0 19 3 2 #"] "
0 0 19 3 4 #"unir"
0 0 19 3 2 #" ["
0 0 19 3 1 #"1"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"3"
0 0 19 3 3 #"])\""
0 0 25 3 2 #") "
0 0 17 3 28 #";primitiva binaria de listas"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";(interpretador)"
0           0
